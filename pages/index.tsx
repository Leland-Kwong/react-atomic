import dynamic from 'next/dynamic'
import { useEffect, useMemo } from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import {
  atomRef,
  useReadAtom,
  useSetAtom,
  AtomRoot
} from '../libs/atomic-state'

interface Hello {
  text: string
  showTimer: boolean
}

const helloRef = atomRef<Hello>({
  key: 'Hello',
  defaultState: {
    text: 'Hello world',
    showTimer: true
  }
})

const setText = (s: Hello, text: string) => ({
  ...s,
  text
})

const toggleShowTimer = (s: Hello, show: boolean) => ({
  ...s,
  showTimer: show
})

type TimeElapsed = number

const timerRef = atomRef<TimeElapsed>({
  key: 'TimeElapsed',
  defaultState: 0
})

const tick = (time: TimeElapsed, incrementBy: number) =>
  time + incrementBy
const identity = <T,>(x: T) => x

const Timer = () => {
  const count = useReadAtom(timerRef, identity)
  const sendTimer = useSetAtom(timerRef)

  useEffect(() => {
    const timer = setTimeout(() => {
      sendTimer(tick, 1)
    }, 1000)

    return () => clearTimeout(timer)
  }, [sendTimer, count])

  return <div>Time Elapsed: {count}s</div>
}

const AtomAppDemo = () => {
  const text = useReadAtom(helloRef, (s) => s.text)
  const showTimer = useReadAtom(
    helloRef,
    (s) => s.showTimer
  )
  const sendHello = useSetAtom(helloRef)

  return (
    <div>
      <div>
        <input
          type="text"
          value={text}
          onChange={(ev) => {
            sendHello(setText, ev.target.value)
          }}
        />
      </div>
      <div>
        <label>
          <input
            type="checkbox"
            onChange={(ev) => {
              sendHello(toggleShowTimer, ev.target.checked)
            }}
            checked={showTimer}
          />
          clock enabled
        </label>
        {showTimer && <Timer />}
      </div>
    </div>
  )
}

const Home: NextPage = () => {
  const AtomDevTools = useMemo(
    () =>
      dynamic(
        async () =>
          (await import('../libs/atomic-state'))
            .AtomDevTools,
        { ssr: false }
      ),
    []
  )

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1>React Atomic</h1>

        <AtomRoot>
          <AtomAppDemo />
          <AtomDevTools />
        </AtomRoot>
      </main>
    </div>
  )
}

export default Home
